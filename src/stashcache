#!/bin/env python
'''
Collect XRootD stats and report to HTCondor collector
'''

# Viewing stats in collector:
# condor_status -pool collector1.opensciencegrid.org:9619 -any xrootd@hcc-stash.unl.edu -l

import argparse
import logging
import os
import random
import sys
import socket
import time

import htcondor
import xrootd_cache_stats

# Ad expires from collector after 15 minutes
REFRESH_INTERVAL = 600 + random.randrange(180) # seconds

def heart_beat(hostname, cache_path='/stash', one_shot=False):
    '''Send heartbeats and cache ads to the condor_master'''
    try:
        central_coll_url = htcondor.param['OSG_COLLECTOR_HOST']
    except KeyError:
        central_coll_url = 'collector1.opensciencegrid.org:9619,collector2.opensciencegrid.org:9619'
    logging.debug('Using %s as the central collector', central_coll_url)
    central_coll = htcondor.Collector(central_coll_url)

    xrootd_url = 'root://' + hostname
    while True:
        start_time = time.time()
        logging.debug('Collecting cache stats from %s', cache_path)
        cache_ad = xrootd_cache_stats.collect_cache_stats(xrootd_url, cache_path)
        cache_ad['STASHCACHE_DaemonVersion'] = '##VERSION##'
        if cache_ad['ping_response_status'] == 'ok':
            logging.debug('XRootD server (%s) status: OK', xrootd_url)
            pool = central_coll.query(htcondor.AdTypes.Collector)[0]['Machine']
            logging.info('Advertising StashCache ads to %s', pool)
            # Save and restore euid, as advertise() changes it
            old_uid = os.geteuid()
            central_coll.advertise([cache_ad], 'UPDATE_STARTD_AD')
            os.seteuid(old_uid)
        else:
            logging.warning('No heartbeat from XRootD server')

        if one_shot:
            break
        else:
            end_time = time.time()
            logging.debug('Cache stat collection took %s seconds', end_time - start_time)
            sleep_time = max(0, REFRESH_INTERVAL - (end_time - start_time))
            logging.debug('Sleeping %d seconds before ad refresh', sleep_time)
            time.sleep(sleep_time)

def main():
    '''Main function'''
    args = parse_args()

    # Enable logging
    log_level = max(3 - args.verbose_count, 0) * 10
    log_format = '%(levelname)s: %(message)s'
    logging.basicConfig(level=log_level, format=log_format)

    # Check for existence of host cert/key pair
    for pki in 'cert', 'key':
        pki_path = '/etc/grid-security/host%s.pem' % pki
        if not os.path.exists(pki_path):
            logging.error('Could not find host %s at %s', pki, pki_path)
            sys.exit(1)

    # Monitor the xrootd service
    hostname = socket.getfqdn()
    heart_beat(hostname, one_shot=args.one_shot, cache_path=args.cache_path)

def parse_args():
    '''Parse CLI options'''
    parser = argparse.ArgumentParser()

    parser.add_argument('--one-shot', default=False, action='store_true',
                        help='Run once, rather than persistently')
    parser.add_argument('--cache-path', default='/stash',
                        help='Path to the local XRootD stashcache directory')
    parser.add_argument('-v', '--verbose', dest='verbose_count',
                        action='count', default=0,
                        help='Increase log verbosity (repeatable)')
    return parser.parse_args()

if __name__ == '__main__':
    main()

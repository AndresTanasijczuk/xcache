#!/bin/bash

module load xrootd/4.1.1
export PATH=$PATH:$(pwd)

usage="$(basename "$0") [-d] [-r] [-h] -s <source> [-l <location to be copied to>]

	-d: show debugging information
	-r: recursively copy
	-h: show this help text
	
	--closest: return closest cache location

	Exit status 4 indicates that at least one file did not successfully copy over."

function getClose {
	## for now, call Ilija's code, and hope that it is available nearby
        setStashCache=`which setStashCache.sh 2>/dev/null`
        if [ $? -ne '0' ]; then
          >&2 echo "Cannot find setStashCache.sh, setting to defaults"
          echo "root://data.ci-connect.net"
	  exit 1
        else 	
	  source $setStashCache 2>&1 > /dev/null
          echo $STASHPREFIX
	fi
}

debug=0
file=""
loc="."
source=""
recursive=0
if [ "$#" -eq 0 ]; then
	echo "$usage"
	exit
fi
## http://stackoverflow.com/a/5230306
## http://stackoverflow.com/a/7948533
if ! options=$(getopt -o :drhs:l: -l closest -- "$@"); then
	exit 1
fi
eval set -- "$options"
while [ $# -gt 0 ]; do
    case $1 in 
	-h)
	    echo "$usage"
	    exit
	    ;;
	-d)
	    debug=2
	    ;;
	-s)
	    source=$2
		shift
	    ;;
	-r)
	    recursive=1
	    ;;
	-l)
	    loc=$2
		shift
	    ;;
	--closest)
		getClose
		exit
		;;
	(--)
		shift
		break
		;;
	(-*)
	    echo "$0: error - unrecognized option $1" 1>&2
	    echo "$usage" >&2
	    exit 1
	    ;;
	(*)
		break
		;;
    esac
	shift
done

echo "Source: $source"
echo "Location: $loc"

#echo "$(date): Got opts"

if [ $debug -eq 2 ]; then
	xrdargs="-d 2 --nopbar"
else
	xrdargs="-s"
fi

## find chirp
which condor_chirp 
res=$?
if [ $res -ne 0 ]; then
	if [ -s /usr/libexec/condor/condor_chirp ]; then
		PATH=$PATH:/usr/libexec/condor
	else
		cd ../../
		pd=$(find . | grep "condor_chirp")
		if [ -z $pd ]; then
			echo "condor_chirp not found" >&2
		else
			#echo "Trying non-usr option"
			p1=$(echo $pd | cut -c 2-)
			p2=$(echo $p1 | rev | cut -d'/' -f2- | rev)
			cwd=$(pwd)
			PATH=$PATH:$cwd/$p2
		fi
		cd -
	fi
fi

## set prefix to proper format
if [[ $OSG_SITE_NAME == CIT* ]]; then
    STASHPREFIX="root://phiphi.t2.ucsd.edu"
    myprefix=$STASHPREFIX
elif [ ${#STASHPREFIX} -lt 3 ]; then
    myprefix="root://data.ci-connect.net"
	echo "Empty prefix"
else
	lcs=$(echo "${STASHPREFIX: -1}")
	if [ $lcs == "/" ]; then
		myprefix=$(echo $STASHPREFIX | rev | cut -c 2- | rev)
	else
		myprefix=$STASHPREFIX
	fi
fi

## check to see if chosen path is a file or directory
## get size and appropriate time limit
isdir=$(xrdfs root://data.ci-connect.net stat $source | grep "IsDir" | wc -l)
sz=$(xrdfs root://data.ci-connect.net stat $source | grep "Size: " | cut -d':' -f2)
sz=$(echo -n "${sz//[[:space:]]/}")
## if someone has 'Size: ' in their file path, they have bigger problems than this not working.
mb=$((sz/1000000))
tm=$((300+mb))
if [ $debug -eq 2 ]; then
	echo "Time limit is $tm s for $mb MB"
fi
if [ $isdir -eq 0 ]; then
	files=($source)
else
	files=$(xrdfs root://data.ci-connect.net ls $source)
	lc=$(echo "${source: -1}")
	if [ $lc == "/" ]; then
		dirname=$(echo $source | rev | cut -d/ -f2 | rev)
	else
		dirname=$(echo $source | rev | cut -d/ -f1 | rev)
	fi
	loc=$loc/$dirname
	mkdir -p $loc
fi

if [ ! -n "$OSG_SITE_NAME" ]; then
	OSG_SITE_NAME="UNKNOWN"
fi

## try pulling from closest cache
## if xrdcp doesn't finish in the time allotted, stop
failed=0
## iterate through list of files
for file in ${files[@]}; do
	## determine whether the input source is a directory or not
	## if it is a directory, call stashcp on each file in the directory
	fisdir=$(xrdfs root://data.ci-connect.net stat $file | grep "IsDir" | wc -l)
	if [ $fisdir -ne 0 ]; then
		if [ $recursive -eq 1 ]; then
			if [ $debug -eq 2 ]; then
				fl="-d"
			else
				fl=""
			fi
			stashcp $fl -s $file -l $loc 
		fi
		continue
	fi
	## use included timeout script (timeout.sh) to timeout on xrdcp
	st1=$(date +%s%3N)
	timeout $tm xrdcp $xrdargs -f $myprefix://$file $loc 2>&1
	res=$?
	dl1=$(date +%s%3N)
	## check to see if the pull worked
	## if not, pull from trunk (currently hard-coded to data.ci-connect.net)
	myfile=$(echo $file | rev | cut -d/ -f1 | rev)
	if [ $res -ne 0 ]; then		
		## pull failed
	    if [ $debug -eq 2 ]; then	
			## print out debug info
			echo "Pull of $file from $myprefix failed."
			echo "Command: xrdcp $xrdargs -f $myprefix://$file $loc 2>&1"
			echo "Trying to pull from trunk."
		fi
		## chirp failure data
		condor_chirp set_job_attr Chirp_StashCp_Error \"Pull of $file from $myprefix failed with code $res\"
		condor_chirp set_job_attr Chirp_StashCp_Used true 
		## try pulling from trunk			
		st2=$(date +%s%3N)
		timeout $tm xrdcp $xrdargs -f root://data.ci-connect.net://$file $loc 2>&1
		res=$?
		dl2=$(date +%s%3N)
		if [ $res -ne 0 ]; then		
			## pull from trunk failed; print debug info
			condor_chirp set_job_attr Chirp_StashCp_Error \"Pull of $file from trunk failed with code $res\"
			echo "Stashcp of $file failed."
			echo "Command: xrdcp $xrdargs -f root://data.ci-connect.net://$file $loc 2>&1"
			failed=$((failed+1))
		else		
			## pull succeeded
			dltm=$((dl2-st2))
			if [ $debug -eq 2 ]; then
				echo "Pull from trunk was successful."
			fi
			## send out data on usage to flume, chirp
			hn="root://data.ci-connect.net"
			timestamp=$(date +%s)
			header="[{ \"headers\" : {\"timestamp\" : \"${timestamp}\", \"host\" : \"${hn}\" },"
			body="\"body\" : \"$((st2/1000)),$file,$sz,$dltm,$OSG_SITE_NAME,$hn\"}]"
			echo $header$body > data.json
			timeout 10s curl -X POST -H 'Content-Type: application/json; charset=UTF-8' http://hadoop-dev.mwt2.org:80/ -d @data.json 2>&1
			rm data.json 2>&1
			condor_chirp set_job_attr Chirp_StashCp_DLStart $((st2/1000)) > /dev/null 2>&1
			condor_chirp set_job_attr Chirp_StashCp_FileName\"$file\" > /dev/null 2>&1
			condor_chirp set_job_attr Chirp_StashCp_FileSize $sz > /dev/null 2>&1
			condor_chirp set_job_attr Chirp_StashCp_DLTimeMs $dltm > /dev/null 2>&1
			condor_chirp set_job_attr Chirp_StashCp_Source \"data.ci-connect.net\" > /dev/null 2>&1
			condor_chirp set_job_attr Chirp_StashCp_Dest \"$OSG_SITE_NAME\" > /dev/null 2>&1
			condor_chirp set_job_attr Chirp_StashCp_Used true > /dev/null 2>&1
		fi
	else
		## pull from local cache succeeded
		dltm=$((dl1-st1))
		echo "Pull of $myfile from $myprefix was successful."
		#if [ $debug -eq 2 ]; then
			#printf "Source: %s\tDestination: %s\tFile: %s\tTime: %s ms\tStart: %s\tSize: %s B\n" "$myprefix" "$OSG_SITE_NAME" "$myfile" "$dltm" "$st1" "$sz"
			#fi
		## send out data on usage to flume, chirp
		hn=$myprefix
		timestamp=$(date +%s)
		header="[{ \"headers\" : {\"timestamp\" : \"${timestamp}\", \"host\" : \"${hn}\" },"
		body="\"body\" : \"$((st1/1000)),$file,$sz,$dltm,$OSG_SITE_NAME,$hn\"}]"
		echo $header$body > data.json
		timeout 10s curl -X POST -H 'Content-Type: application/json; charset=UTF-8' http://hadoop-dev.mwt2.org:80/ -d @data.json 2>&1
		rm data.json 2>&1
		condor_chirp set_job_attr Chirp_StashCp_DLStart $((st1/1000)) > /dev/null 2>&1
		condor_chirp set_job_attr Chirp_StashCp_FileName \"$file\" > /dev/null 2>&1
		condor_chirp set_job_attr Chirp_StashCp_FileSize $sz > /dev/null 2>&1
		condor_chirp set_job_attr Chirp_StashCp_DLTimeMs $dltm > /dev/null 2>&1
		condor_chirp set_job_attr Chirp_StashCp_Source \"$myprefix\" > /dev/null 2>&1
		condor_chirp set_job_attr Chirp_StashCp_Dest \"$OSG_SITE_NAME\" > /dev/null 2>&1
		condor_chirp set_job_attr Chirp_StashCp_Used true > /dev/null 2>&1
	fi
done

#Note: if any one file transfer fails, then stashcp fails
if [ $failed -ne 0 ]; then
	exit 4
else
	exit 0
fi
